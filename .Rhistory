data <- cbind(data_num, data[, c(983:985)])  # 将两个数据框进行列绑定
# 去掉QC样品中0大于20%和两组样品中0都大于50%的列
data_QC <- subset(data, data$group == 'QC')
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
QC <- vector()
for(i in 1:(ncol(data) - 3))
{
QC[i] <- sum(data_QC[, i] == 0)
}
zeroqc <- which(QC > (0.2 * (nrow(data_QC))))  #QC样本中0大于％20的列
TG <- vector()
for(i in 1:(ncol(data) - 3))
{
TG[i] <- sum(data_TG[,i] == 0)
}
zerotg <- which(TG > (0.5 * (nrow(data_TG))))   #TG样本中0大于％20的列
CG <- vector()
for(i in 1:(ncol(data) - 3))
{
CG[i] <- sum(data_CG[, i] == 0)
}
zerocg <- which(CG > (0.5 * (nrow(data_CG))))   #CG样本中0大于％20的列
zero <- union(zeroqc,intersect(zerotg, zerocg))
data <- data[,-zero]
# 均值填补法
data_QC <- subset(data, data$group == 'QC')  # 从data数据框中选择符合条件的子集
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
meanQC <- c()
for(i in 1:(ncol(data) - 3)){
meanQC[i] = mean(data_QC[, i])
}
for(i in 1:(nrow(data_QC))){
for(j in 1:(ncol(data_QC) - 3)){
if (data_QC[i, j] == 0 ){
data_QC[i, j] <- meanQC[j]
}
}
}
meanTG <- c()
for(i in 1:(ncol(data) - 3)){
meanTG[i] = mean(data_TG[, i])
}
for(i in 1:(nrow(data_TG))){
for(j in 1:(ncol(data_TG) - 3)){
if (data_TG[i, j] == 0 ){
data_TG[i, j] <- meanTG[j]
}
}
}
meanCG <- c()
for(i in 1:(ncol(data) - 3)){
meanCG[i] = mean(data_CG[, i])
}
for(i in 1:(nrow(data_CG))){
for(j in 1:(ncol(data_CG) - 3)){
if (data_CG[i, j] == 0 ){
data_CG[i, j] <- meanCG[j]
}
}
}
data <- rbind(data_QC, data_TG, data_CG)  # 将处理好的各组样本合并
data <- data[order(data$order), ]  # 按照order的顺序排列
# ------------------------------------  log转换  ------------------------------------
datalog <- data[, c(1:(ncol(data) - 3))]
datalog <- log(datalog)
datalog <- cbind(data[, c(662, 663, 664)], datalog)
data <- datalog
# ------------------------------------  归一化  ------------------------------------
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenMS.R")
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenRF.R")
library(readxl)
options(scipen = 200)  # 调整数字的科学计数法
# 提取信息
peak <- data.frame(t(data[, -c(1:3)]))  # 转置，提取峰的信息
metabolites <- data.frame(colnames(data)[-c(1:3)])  # 提取代谢特征的名称信息
colnames(metabolites) <- "metabolites"
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
order_group <- order_group[order(order_group$order), ]
groups <- c(as.factor(order_group$GROUPS))
# 3.EigenRF
norm_eigen_rf <- Eigen_RF(peak, metabolites, groups)
rm(list=ls())
# ------------------------------------  导入数据  ------------------------------------
library(readxl)
library(EigenRF)
data_raw<-read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/xcms after IPO.csv", sep=",", header=F)
data <- data_raw
row_names <- data[, 1]  # 提取行名
col_names <- data[1, ]  # 提取列名
data <- data[-1, -1]  # 令data去掉第一行与第一列
row.names(data) <- row_names[-1]  # 将data的行名设置为row中除第一个元素之外的所有元素
colnames(data) <- col_names[-1]  # 同上
data$sample <- row.names(data)  # 将data行名赋值给data的一个新的列sample
# 读取样本的组别信息
group <- read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/group.csv", sep=',', header=TRUE)
data$group <- group$x  # 将group的x列复制给data的一个新的列group
# 读取样本的顺序、组别等信息
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
data$order <- order_group$order  # 将order_group
data <- data[order(data$order), ]  # 按照data中order列的值进行升序排序，并将排序后的结果重新赋值给data
# ------------------------------------  缺失值处理  ------------------------------------
data[data == ''] <- 0  # 将data数据框中每个为空值的元素填充为0
data_num <- data[, -c(983:985)]  # 除983-985列的其余数据赋值给data_num
data_num <- apply(data_num, 2, as.numeric)  # 将所有列转换为数值型，参数2表示按列操作，即应用于每一列
data <- cbind(data_num, data[, c(983:985)])  # 将两个数据框进行列绑定
# 去掉QC样品中0大于20%和两组样品中0都大于50%的列
data_QC <- subset(data, data$group == 'QC')
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
QC <- vector()
for(i in 1:(ncol(data) - 3))
{
QC[i] <- sum(data_QC[, i] == 0)
}
zeroqc <- which(QC > (0.2 * (nrow(data_QC))))  #QC样本中0大于％20的列
TG <- vector()
for(i in 1:(ncol(data) - 3))
{
TG[i] <- sum(data_TG[,i] == 0)
}
zerotg <- which(TG > (0.5 * (nrow(data_TG))))   #TG样本中0大于％20的列
CG <- vector()
for(i in 1:(ncol(data) - 3))
{
CG[i] <- sum(data_CG[, i] == 0)
}
zerocg <- which(CG > (0.5 * (nrow(data_CG))))   #CG样本中0大于％20的列
zero <- union(zeroqc,intersect(zerotg, zerocg))
data <- data[,-zero]
# 均值填补法
data_QC <- subset(data, data$group == 'QC')  # 从data数据框中选择符合条件的子集
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
meanQC <- c()
for(i in 1:(ncol(data) - 3)){
meanQC[i] = mean(data_QC[, i])
}
for(i in 1:(nrow(data_QC))){
for(j in 1:(ncol(data_QC) - 3)){
if (data_QC[i, j] == 0 ){
data_QC[i, j] <- meanQC[j]
}
}
}
meanTG <- c()
for(i in 1:(ncol(data) - 3)){
meanTG[i] = mean(data_TG[, i])
}
for(i in 1:(nrow(data_TG))){
for(j in 1:(ncol(data_TG) - 3)){
if (data_TG[i, j] == 0 ){
data_TG[i, j] <- meanTG[j]
}
}
}
meanCG <- c()
for(i in 1:(ncol(data) - 3)){
meanCG[i] = mean(data_CG[, i])
}
for(i in 1:(nrow(data_CG))){
for(j in 1:(ncol(data_CG) - 3)){
if (data_CG[i, j] == 0 ){
data_CG[i, j] <- meanCG[j]
}
}
}
data <- rbind(data_QC, data_TG, data_CG)  # 将处理好的各组样本合并
data <- data[order(data$order), ]  # 按照order的顺序排列
# ------------------------------------  log转换  ------------------------------------
datalog <- data[, c(1:(ncol(data) - 3))]
datalog <- log(datalog)
datalog <- cbind(data[, c(662, 663, 664)], datalog)
data <- datalog
# ------------------------------------  归一化  ------------------------------------
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenMS.R")
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenRF.R")
library(readxl)
options(scipen = 200)  # 调整数字的科学计数法
# 提取信息
peak <- data.frame(t(data[, -c(1:3)]))  # 转置，提取峰的信息
metabolites <- data.frame(colnames(data)[-c(1:3)])  # 提取代谢特征的名称信息
colnames(metabolites) <- "metabolites"
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
order_group <- order_group[order(order_group$order), ]
groups <- c(as.factor(order_group$GROUPS))
# 3.EigenRF
norm_eigen_rf <- Eigen_RF(peak, metabolites, groups)
rm(list=ls())
# ------------------------------------  导入数据  ------------------------------------
library(readxl)
library(EigenRF)
data_raw<-read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/xcms after IPO.csv", sep=",", header=F)
data <- data_raw
row_names <- data[, 1]  # 提取行名
col_names <- data[1, ]  # 提取列名
data <- data[-1, -1]  # 令data去掉第一行与第一列
row.names(data) <- row_names[-1]  # 将data的行名设置为row中除第一个元素之外的所有元素
colnames(data) <- col_names[-1]  # 同上
data$sample <- row.names(data)  # 将data行名赋值给data的一个新的列sample
# 读取样本的组别信息
group <- read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/group.csv", sep=',', header=TRUE)
data$group <- group$x  # 将group的x列复制给data的一个新的列group
# 读取样本的顺序、组别等信息
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
data$order <- order_group$order  # 将order_group
data <- data[order(data$order), ]  # 按照data中order列的值进行升序排序，并将排序后的结果重新赋值给data
# ------------------------------------  缺失值处理  ------------------------------------
data[data == ''] <- 0  # 将data数据框中每个为空值的元素填充为0
data_num <- data[, -c(983:985)]  # 除983-985列的其余数据赋值给data_num
data_num <- apply(data_num, 2, as.numeric)  # 将所有列转换为数值型，参数2表示按列操作，即应用于每一列
data <- cbind(data_num, data[, c(983:985)])  # 将两个数据框进行列绑定
# 去掉QC样品中0大于20%和两组样品中0都大于50%的列
data_QC <- subset(data, data$group == 'QC')
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
QC <- vector()
for(i in 1:(ncol(data) - 3))
{
QC[i] <- sum(data_QC[, i] == 0)
}
zeroqc <- which(QC > (0.2 * (nrow(data_QC))))  #QC样本中0大于％20的列
TG <- vector()
for(i in 1:(ncol(data) - 3))
{
TG[i] <- sum(data_TG[,i] == 0)
}
zerotg <- which(TG > (0.5 * (nrow(data_TG))))   #TG样本中0大于％20的列
CG <- vector()
for(i in 1:(ncol(data) - 3))
{
CG[i] <- sum(data_CG[, i] == 0)
}
zerocg <- which(CG > (0.5 * (nrow(data_CG))))   #CG样本中0大于％20的列
zero <- union(zeroqc,intersect(zerotg, zerocg))
data <- data[,-zero]
# 均值填补法
data_QC <- subset(data, data$group == 'QC')  # 从data数据框中选择符合条件的子集
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
meanQC <- c()
for(i in 1:(ncol(data) - 3)){
meanQC[i] = mean(data_QC[, i])
}
for(i in 1:(nrow(data_QC))){
for(j in 1:(ncol(data_QC) - 3)){
if (data_QC[i, j] == 0 ){
data_QC[i, j] <- meanQC[j]
}
}
}
meanTG <- c()
for(i in 1:(ncol(data) - 3)){
meanTG[i] = mean(data_TG[, i])
}
for(i in 1:(nrow(data_TG))){
for(j in 1:(ncol(data_TG) - 3)){
if (data_TG[i, j] == 0 ){
data_TG[i, j] <- meanTG[j]
}
}
}
meanCG <- c()
for(i in 1:(ncol(data) - 3)){
meanCG[i] = mean(data_CG[, i])
}
for(i in 1:(nrow(data_CG))){
for(j in 1:(ncol(data_CG) - 3)){
if (data_CG[i, j] == 0 ){
data_CG[i, j] <- meanCG[j]
}
}
}
data <- rbind(data_QC, data_TG, data_CG)  # 将处理好的各组样本合并
data <- data[order(data$order), ]  # 按照order的顺序排列
# ------------------------------------  log转换  ------------------------------------
datalog <- data[, c(1:(ncol(data) - 3))]
datalog <- log(datalog)
datalog <- cbind(data[, c(662, 663, 664)], datalog)
data <- datalog
# ------------------------------------  归一化  ------------------------------------
source("/Users/tangchencheng/Desktop/Project/EigenRF备份/Code/Code/EigenMS.R")
source("/Users/tangchencheng/Desktop/Project/EigenRF备份/Code/Code/EigenRF.R")
library(readxl)
options(scipen = 200)  # 调整数字的科学计数法
# 提取信息
peak <- data.frame(t(data[, -c(1:3)]))  # 转置，提取峰的信息
metabolites <- data.frame(colnames(data)[-c(1:3)])  # 提取代谢特征的名称信息
colnames(metabolites) <- "metabolites"
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
order_group <- order_group[order(order_group$order), ]
groups <- c(as.factor(order_group$GROUPS))
# 3.EigenRF
norm_eigen_rf <- Eigen_RF(peak, metabolites, groups)
rm(list=ls())
rm(list=ls())
# ------------------------------------  导入数据  ------------------------------------
library(readxl)
library(EigenRF)
data_raw<-read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/xcms after IPO.csv", sep=",", header=F)
data <- data_raw
row_names <- data[, 1]  # 提取行名
col_names <- data[1, ]  # 提取列名
data <- data[-1, -1]  # 令data去掉第一行与第一列
row.names(data) <- row_names[-1]  # 将data的行名设置为row中除第一个元素之外的所有元素
colnames(data) <- col_names[-1]  # 同上
data$sample <- row.names(data)  # 将data行名赋值给data的一个新的列sample
# 读取样本的组别信息
group <- read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/group.csv", sep=',', header=TRUE)
data$group <- group$x  # 将group的x列复制给data的一个新的列group
# 读取样本的顺序、组别等信息
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
data$order <- order_group$order  # 将order_group
data <- data[order(data$order), ]  # 按照data中order列的值进行升序排序，并将排序后的结果重新赋值给data
# ------------------------------------  缺失值处理  ------------------------------------
data[data == ''] <- 0  # 将data数据框中每个为空值的元素填充为0
data_num <- data[, -c(983:985)]  # 除983-985列的其余数据赋值给data_num
data_num <- apply(data_num, 2, as.numeric)  # 将所有列转换为数值型，参数2表示按列操作，即应用于每一列
data <- cbind(data_num, data[, c(983:985)])  # 将两个数据框进行列绑定
# 去掉QC样品中0大于20%和两组样品中0都大于50%的列
data_QC <- subset(data, data$group == 'QC')
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
QC <- vector()
for(i in 1:(ncol(data) - 3))
{
QC[i] <- sum(data_QC[, i] == 0)
}
zeroqc <- which(QC > (0.2 * (nrow(data_QC))))  #QC样本中0大于％20的列
TG <- vector()
for(i in 1:(ncol(data) - 3))
{
TG[i] <- sum(data_TG[,i] == 0)
}
zerotg <- which(TG > (0.5 * (nrow(data_TG))))   #TG样本中0大于％20的列
CG <- vector()
for(i in 1:(ncol(data) - 3))
{
CG[i] <- sum(data_CG[, i] == 0)
}
zerocg <- which(CG > (0.5 * (nrow(data_CG))))   #CG样本中0大于％20的列
zero <- union(zeroqc,intersect(zerotg, zerocg))
data <- data[,-zero]
# 均值填补法
data_QC <- subset(data, data$group == 'QC')  # 从data数据框中选择符合条件的子集
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
meanQC <- c()
for(i in 1:(ncol(data) - 3)){
meanQC[i] = mean(data_QC[, i])
}
for(i in 1:(nrow(data_QC))){
for(j in 1:(ncol(data_QC) - 3)){
if (data_QC[i, j] == 0 ){
data_QC[i, j] <- meanQC[j]
}
}
}
meanTG <- c()
for(i in 1:(ncol(data) - 3)){
meanTG[i] = mean(data_TG[, i])
}
for(i in 1:(nrow(data_TG))){
for(j in 1:(ncol(data_TG) - 3)){
if (data_TG[i, j] == 0 ){
data_TG[i, j] <- meanTG[j]
}
}
}
meanCG <- c()
for(i in 1:(ncol(data) - 3)){
meanCG[i] = mean(data_CG[, i])
}
for(i in 1:(nrow(data_CG))){
for(j in 1:(ncol(data_CG) - 3)){
if (data_CG[i, j] == 0 ){
data_CG[i, j] <- meanCG[j]
}
}
}
data <- rbind(data_QC, data_TG, data_CG)  # 将处理好的各组样本合并
data <- data[order(data$order), ]  # 按照order的顺序排列
# ------------------------------------  log转换  ------------------------------------
datalog <- data[, c(1:(ncol(data) - 3))]
datalog <- log(datalog)
datalog <- cbind(data[, c(662, 663, 664)], datalog)
data <- datalog
# ------------------------------------  归一化  ------------------------------------
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenMS.R")
source("/Users/tangchencheng/Desktop/Project/EigenRF备份/Code/Code/EigenRF.R")
library(readxl)
options(scipen = 200)  # 调整数字的科学计数法
# 提取信息
peak <- data.frame(t(data[, -c(1:3)]))  # 转置，提取峰的信息
metabolites <- data.frame(colnames(data)[-c(1:3)])  # 提取代谢特征的名称信息
colnames(metabolites) <- "metabolites"
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
order_group <- order_group[order(order_group$order), ]
groups <- c(as.factor(order_group$GROUPS))
# 3.EigenRF
norm_eigen_rf <- Eigen_RF(peak, metabolites, groups)
rm(list=ls())
# ------------------------------------  导入数据  ------------------------------------
library(readxl)
library(EigenRF)
data_raw<-read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/xcms after IPO.csv", sep=",", header=F)
data <- data_raw
row_names <- data[, 1]  # 提取行名
col_names <- data[1, ]  # 提取列名
data <- data[-1, -1]  # 令data去掉第一行与第一列
row.names(data) <- row_names[-1]  # 将data的行名设置为row中除第一个元素之外的所有元素
colnames(data) <- col_names[-1]  # 同上
data$sample <- row.names(data)  # 将data行名赋值给data的一个新的列sample
# 读取样本的组别信息
group <- read.csv("/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/group.csv", sep=',', header=TRUE)
data$group <- group$x  # 将group的x列复制给data的一个新的列group
# 读取样本的顺序、组别等信息
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
data$order <- order_group$order  # 将order_group
data <- data[order(data$order), ]  # 按照data中order列的值进行升序排序，并将排序后的结果重新赋值给data
# ------------------------------------  缺失值处理  ------------------------------------
data[data == ''] <- 0  # 将data数据框中每个为空值的元素填充为0
data_num <- data[, -c(983:985)]  # 除983-985列的其余数据赋值给data_num
data_num <- apply(data_num, 2, as.numeric)  # 将所有列转换为数值型，参数2表示按列操作，即应用于每一列
data <- cbind(data_num, data[, c(983:985)])  # 将两个数据框进行列绑定
# 去掉QC样品中0大于20%和两组样品中0都大于50%的列
data_QC <- subset(data, data$group == 'QC')
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
QC <- vector()
for(i in 1:(ncol(data) - 3))
{
QC[i] <- sum(data_QC[, i] == 0)
}
zeroqc <- which(QC > (0.2 * (nrow(data_QC))))  #QC样本中0大于％20的列
TG <- vector()
for(i in 1:(ncol(data) - 3))
{
TG[i] <- sum(data_TG[,i] == 0)
}
zerotg <- which(TG > (0.5 * (nrow(data_TG))))   #TG样本中0大于％20的列
CG <- vector()
for(i in 1:(ncol(data) - 3))
{
CG[i] <- sum(data_CG[, i] == 0)
}
zerocg <- which(CG > (0.5 * (nrow(data_CG))))   #CG样本中0大于％20的列
zero <- union(zeroqc,intersect(zerotg, zerocg))
data <- data[,-zero]
# 均值填补法
data_QC <- subset(data, data$group == 'QC')  # 从data数据框中选择符合条件的子集
data_TG <- subset(data, data$group == 'TG')
data_CG <- subset(data, data$group == 'CG')
meanQC <- c()
for(i in 1:(ncol(data) - 3)){
meanQC[i] = mean(data_QC[, i])
}
for(i in 1:(nrow(data_QC))){
for(j in 1:(ncol(data_QC) - 3)){
if (data_QC[i, j] == 0 ){
data_QC[i, j] <- meanQC[j]
}
}
}
meanTG <- c()
for(i in 1:(ncol(data) - 3)){
meanTG[i] = mean(data_TG[, i])
}
for(i in 1:(nrow(data_TG))){
for(j in 1:(ncol(data_TG) - 3)){
if (data_TG[i, j] == 0 ){
data_TG[i, j] <- meanTG[j]
}
}
}
meanCG <- c()
for(i in 1:(ncol(data) - 3)){
meanCG[i] = mean(data_CG[, i])
}
for(i in 1:(nrow(data_CG))){
for(j in 1:(ncol(data_CG) - 3)){
if (data_CG[i, j] == 0 ){
data_CG[i, j] <- meanCG[j]
}
}
}
data <- rbind(data_QC, data_TG, data_CG)  # 将处理好的各组样本合并
data <- data[order(data$order), ]  # 按照order的顺序排列
# ------------------------------------  log转换  ------------------------------------
datalog <- data[, c(1:(ncol(data) - 3))]
datalog <- log(datalog)
datalog <- cbind(data[, c(662, 663, 664)], datalog)
data <- datalog
# ------------------------------------  归一化  ------------------------------------
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenMS.R")
source("/Users/tangchencheng/Desktop/Project/mypkg/EigenRF/R/EigenRF.R")
library(readxl)
options(scipen = 200)  # 调整数字的科学计数法
# 提取信息
peak <- data.frame(t(data[, -c(1:3)]))  # 转置，提取峰的信息
metabolites <- data.frame(colnames(data)[-c(1:3)])  # 提取代谢特征的名称信息
colnames(metabolites) <- "metabolites"
order_group <- read_excel('/Users/tangchencheng/Desktop/Project/代谢组学/绘图/原始数据1/order.xlsx')
order_group <- order_group[order(order_group$order), ]
groups <- c(as.factor(order_group$GROUPS))
# 3.EigenRF
norm_eigen_rf <- Eigen_RF(peak, groups, metabolites)
rm(list=ls())
setwd("/Users/tangchencheng/Desktop/Project/mypkg")
devtools::document()
library(EigenRF)
